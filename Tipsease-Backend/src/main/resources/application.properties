server.port=${PORT:2019}
# server.servlet.context-path=/apis

# Begin h2 configuration
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#spring.h2.console.settings.web-allow-others=true
# End h2 configuration

# Begin PostgreSQL local configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/tipsease
spring.datasource.username=postgres
spring.datasource.password=${MYDBPASSWORD:admin}
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# End PostgreSQL local configuration

# Begin PostgreSQL heroku configuration
# cmd heroku addons:create heroku-postgresql -a jtonna-tipsease-backend
# heroku config -a jrmmba-tipsease
# postgres://rrwzjxlkniayov:83e8dc9dc5a3c3a30e40dde8fb62941da11030b3953709f5c8f808690e776c71@ec2-54-243-241-62.compute-1.amazonaws.com:5432/d7bl8dlv2l83jj
# posgress://username      :password                                                        @url                                      :5432/dbname

# check environment variables:
#      heroku run echo \$SPRING_DATASOURCE_URL -a jrmmba-tipsease
#      heroku run echo \$SPRING_DATASOURCE_USERNAME -a jrmmba-tipsease
#      heroku run echo \$SPRING_DATASOURCE_PASSWORD -a jrmmba-tipsease

### If you environment variables get set, just use those!
#spring.datasource.url=${SPRING_DATASOURCE_URL}
#spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
#spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# my return postgres://azujjvuqxwyebo:cf003c0163dc81f9c3795a91f9f9b722d79bb0c43b5dc2a8f81f5ac961ba4197@ec2-174-129-227-51.compute-1.amazonaws.com:5432/d9hu7imbrhf1ls

### If your environment variables do not get set
#spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://ec2-174-129-227-51.compute-1.amazonaws.com:5432/d9hu7imbrhf1ls?user=azujjvuqxwyebo&password=cf003c0163dc81f9c3795a91f9f9b722d79bb0c43b5dc2a8f81f5ac961ba4197&sslmode=require}
#spring.datasource.username=${SPRING_DATASOURCE_USERNAME:azujjvuqxwyebo}
#spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:cf003c0163dc81f9c3795a91f9f9b722d79bb0c43b5dc2a8f81f5ac961ba4197}
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# End PostgreSQL heroku configuration


# What do with the schema
# drop n create table again, good for testing
spring.jpa.hibernate.ddl-auto=create
spring.datasource.initialization-mode=always

# Good for production!
#spring.jpa.hibernate.ddl-auto=update
#spring.datasource.initialization-mode=never


# Feature that determines what happens when no accessors are found for a type
# (and there are no annotations to indicate it is meant to be serialized).
spring.jackson.serialization.fail-on-empty-beans=false


# Turns off Spring Boot automatic exception handling
server.error.whitelabel.enabled=false


# needed for actuators to work
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.shutdown.enabled=true
